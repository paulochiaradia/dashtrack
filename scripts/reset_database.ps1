# DashTrack - Reset Database Script
# Este script reseta completamente o banco de dados e configura dados iniciais

param(
    [switch]$SkipConfirmation
)

$ErrorActionPreference = "Stop"

Write-Host "üöÄ DashTrack Database Reset Script" -ForegroundColor Cyan
Write-Host "=================================" -ForegroundColor Cyan

if (-not $SkipConfirmation) {
    Write-Host "‚ö†Ô∏è  ATEN√á√ÉO: Este script ir√°:" -ForegroundColor Yellow
    Write-Host "   - Parar todos os containers" -ForegroundColor Red
    Write-Host "   - APAGAR TODOS OS DADOS do banco" -ForegroundColor Red
    Write-Host "   - Recriar banco limpo" -ForegroundColor Green
    Write-Host "   - Configurar dados iniciais" -ForegroundColor Green
    
    $confirmation = Read-Host "`nü§î Deseja continuar? (y/N)"
    if ($confirmation -ne 'y' -and $confirmation -ne 'Y') {
        Write-Host "‚ùå Opera√ß√£o cancelada pelo usu√°rio." -ForegroundColor Red
        exit 0
    }
}

try {
    # 1. Parar containers
    Write-Host "`nüõë Parando containers..." -ForegroundColor Yellow
    docker-compose down
    
    # 2. Remover volume do PostgreSQL
    Write-Host "üóëÔ∏è  Removendo dados do banco..." -ForegroundColor Red
    docker volume rm dashtrack_postgres_data -f 2>$null
    
    # 3. Subir aplica√ß√£o
    Write-Host "üöÄ Subindo aplica√ß√£o com banco limpo..." -ForegroundColor Green
    docker-compose up -d
    
    # 4. Aguardar inicializa√ß√£o
    Write-Host "‚è≥ Aguardando aplica√ß√£o inicializar..." -ForegroundColor Cyan
    Start-Sleep 15
    
    # 5. Verificar se aplica√ß√£o est√° rodando
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:8080/health" -UseBasicParsing -TimeoutSec 10
        if ($response.StatusCode -eq 200) {
            Write-Host "‚úÖ Aplica√ß√£o rodando!" -ForegroundColor Green
        }
    }
    catch {
        Write-Host "‚ö†Ô∏è  Aplica√ß√£o ainda inicializando, aguarde mais alguns segundos..." -ForegroundColor Yellow
    }
    
    # 6. Executar setup inicial do banco
    Write-Host "üìä Configurando dados iniciais..." -ForegroundColor Cyan
    docker-compose exec -T db psql -U user -d dashtrack -f - < scripts/setup_initial_data.sql
    
    # 7. Verifica√ß√µes finais
    Write-Host "`nüîç Verifica√ß√µes finais..." -ForegroundColor Cyan
    
    Write-Host "   üìã Tabelas criadas:" -ForegroundColor White
    docker-compose exec -T db psql -U user -d dashtrack -c "\dt" -q
    
    Write-Host "`n   üè¢ Empresas:" -ForegroundColor White
    docker-compose exec -T db psql -U user -d dashtrack -c "SELECT name, slug, email FROM companies;" -q
    
    Write-Host "`n   üë§ Usu√°rios:" -ForegroundColor White
    docker-compose exec -T db psql -U user -d dashtrack -c "SELECT u.name, u.email, r.name as role FROM users u JOIN roles r ON u.role_id = r.id;" -q
    
    # 8. Teste de login
    Write-Host "`nüß™ Testando login..." -ForegroundColor Cyan
    $loginBody = @{
        email = "master@dashtrack.com"
        password = "password"
    } | ConvertTo-Json
    
    try {
        $loginResponse = Invoke-WebRequest -Uri "http://localhost:8080/api/v1/auth/login" -Method POST -Body $loginBody -ContentType "application/json" -UseBasicParsing
        if ($loginResponse.StatusCode -eq 200) {
            Write-Host "‚úÖ Login funcionando!" -ForegroundColor Green
        }
    }
    catch {
        Write-Host "‚ö†Ô∏è  Erro no teste de login: $($_.Exception.Message)" -ForegroundColor Yellow
    }
    
    # 9. Sucesso
    Write-Host "`nüéâ SETUP CONCLU√çDO COM SUCESSO!" -ForegroundColor Green
    Write-Host "=================================" -ForegroundColor Green
    Write-Host "üìß Email: master@dashtrack.com" -ForegroundColor White
    Write-Host "üîë Senha: password" -ForegroundColor White
    Write-Host "üåê URL: http://localhost:8080" -ForegroundColor White
    Write-Host "üìö Health: http://localhost:8080/health" -ForegroundColor White
    Write-Host "üìä Metrics: http://localhost:8080/metrics" -ForegroundColor White
    
    Write-Host "`nüîß Pr√≥ximos passos:" -ForegroundColor Cyan
    Write-Host "   1. Teste o health check" -ForegroundColor White
    Write-Host "   2. Fa√ßa login com as credenciais acima" -ForegroundColor White
    Write-Host "   3. Crie empresas e usu√°rios conforme necess√°rio" -ForegroundColor White
    Write-Host "   4. Execute seus testes com Postman" -ForegroundColor White

}
catch {
    Write-Host "`n‚ùå ERRO durante a execu√ß√£o:" -ForegroundColor Red
    Write-Host $_.Exception.Message -ForegroundColor Red
    Write-Host "`nüîß Comandos para diagn√≥stico:" -ForegroundColor Yellow
    Write-Host "   docker-compose logs api" -ForegroundColor Gray
    Write-Host "   docker-compose ps" -ForegroundColor Gray
    exit 1
}